[["get-started.html", "Chapter 1 Get Started", " Chapter 1 Get Started 在本章中，我们将展示如何使用 blogdown 从头开始创建一个简单的网站。该网站将包含一个 home page、一个 “About” page、一个 R Markdown post 和两个 plain Markdown posts。您将学习使用 blogdown 创建网站的基本概念。 我们建议将 RStudio IDE 与 blogdown 结合使用，因为 R 包中有许多内置功能可供 RStudio 用户使用，但这不是必需的。使用 RStudio IDE 将使此工作流程中的某些步骤变得更容易，但您可以自由使用任何编辑器。 "],["installation.html", "1.1 Installation", " 1.1 Installation 我们假设您已经安装： R (https://www.r-project.org) (R Core Team 2022) and the RStudio IDE (https://posit.co/download/rstudio-desktop/). 如果您没有使用 RStudio IDE，请安装 Pandoc (http://pandoc.org)。参考站点上提供了说明 (https://pandoc.org/installing.html) 。 blogdown 包在 CRAN 上可用，您可以使用以下命令安装它： install.packages(&#39;blogdown&#39;) 1.1.1 Installation troubleshooting 你有旧版本的 blogdown 吗？将您的版本与我们的版本进行比较，并在必要时进行升级。 packageVersion(&quot;blogdown&quot;) ## [1] &#39;1.19&#39; 要更新 blogdown，请运行 install.packages('blogdown')。 您是否有旧版本的 blogdown 依赖项（例如 rmarkdown）？如果您遇到问题，您可以首先尝试更新所有 R 软件包： update.packages(ask = FALSE, checkBuilt = TRUE) 如果您仍然遇到 blogdown 问题，您可以尝试从 GitHub 安装开发版本： if (!requireNamespace(&#39;remotes&#39;)) install.packages(&#39;remotes&#39;) remotes::install_github(&#39;rstudio/blogdown&#39;) 如果您使用 RStudio，它会提醒您在安装或更新当前正在使用的任何软件包之前重新启动 R。如果您不使用 RStudio，您可能需要自行重新启动 R。 References "],["a-quick-example.html", "1.2 A quick example", " 1.2 A quick example 在本节中，我们的目标是让您以最少的时间和最少的摩擦从没有网站到建立一个基本的 blogdown 网站。我们将使用 blogdown 包使用的默认主题简要介绍一个可以工作但简单的网站的开发过程。 本部分旨在提供适合初学者的工作流程。在后面的部分中，我们将介绍不同的工作流程，并深入探讨高级 blogdown 功能、Hugo 主题、Hugo 静态站点生成器、版本控制和部署选项等细节。 1.2.1 Prerequisites 为了让这个示例真正快速，我们假设您正在使用 RStudio IDE，并将依赖一些帮助 blogdown 用户的内置功能。1 我们还假设您已遵循 Section 1.1 中的安装说明。 1.2.2 Create project 新的 blogdown 网站项目的最佳创建方式是在 RStudio project 中。创建的快速方法是使用 RStudio New Project 菜单 (File -&gt; New Project -&gt; New Directory) (see Figure 1.1 and 1.2)。 FIGURE 1.1: Create a new website project in RStudio. FIGURE 1.2: Create a website project based on blogdown. 单击 “Create Project”。然后，项目向导运行一个函数，通过执行以下步骤为您创建一个新站点： 为网站创建并打开一个新的 RStudio Project; 下载并安装带有示例站点的默认主题 (called hugo-lithium); 添加一个示例 .Rmd post; 创建一个 netlify.toml 文件来帮助您将站点部署到 Netlify,，并且 创建一个 .Rprofile 文件来设置您的 blogdown 选项（其中一些选项已为您设置）。 如果您没有使用 RStudio，您可以创建一个新的空目录，并在 R 控制台中调用该目录中的 new_site() 函数来创建新的站点项目： blogdown::new_site() 您现在应该在站点项目下看到一堆目录和文件。该项目将包含以下文件： config.yaml: Hugo and theme configuration file. .Rprofile: File to set up your blogdown options. netlify.toml: File to set up your Netlify options. content/: Website source files to edit and add, such as blog posts. themes/: Hugo theme assets like HTML layout files and CSS, etc. Do not edit! 完成所有这些后，您的新网站就准备好了！ 1.2.3 Serve site 在我们解释这些新目录和文件之前，让我们使用我们的第一个 blogdown 函数。这是一个重要的功能，并且通常是您打开一个 blogdown 项目以启动网站的本地预览时使用的第一个功能。 您可以从控制台使用 run blogdown::serve_site()，或单击 RStudio 插件 “Serve Site” (see Figure 1.3)。 FIGURE 1.3: Use the blogdown addin to serve the site. 然后您应该看到如 Figure 1.4 所示的内容。 FIGURE 1.4: Serving the site in RStudio. Serving the site 执行了以下操作： 启动本地 Hugo server 来帮助您预览网站，并且 将示例 .Rmd post Knitted 为一个 .html 页面。您可以从打印到控制台的进度消息中看到这一点：Rendering content/post/2020-12-01-r-rmarkdown/index.Rmd... Done. 如果您想在 Web 浏览器中本地预览网站，可以单击 RStudio viewer 窗格顶部的 “Show in new window” 图标（扫帚图标的右侧）。您可以在 Figure 1.5 中看到该网站的外观。 FIGURE 1.5: The homepage of the default new site. 让我们介绍一下您刚刚使用的一项重要且有用的技术：LiveReload.。使用 LiveReload 为您的网站提供服务，这意味着当您修改网站的任何源文件并保存时，您的网站2 将自动重建并重新加载到您的网络浏览器3中。基本上，一旦您在网络浏览器中启动网站，您就不再需要显式地重建它。您所需要做的就是编辑源文件（例如 R Markdown 文档）并保存它们。无需单击任何按钮或运行任何命令。LiveReload 是通过 blogdown::serve_site() 和 Hugo 实现的，每个工作会话只需使用一次。 1.2.4 Edit content 现在让我们看看 LiveReload 的实际应用。在文件窗格中，导航到 content/ 文件夹内。该文件夹是您网站的所有内容所在的位置。查找并打开文件 content/post/2020-12-01-r-rmarkdown/index.Rmd。这是一个示例 R Markdown post，在您设置新站点时默认由 blogdown 添加。 当您打开该文件时，您会注意到顶部有一个 YAML 块，其中包含熟悉的 metadata 如 title 和 author 等，然后是 YAML 下面的代码块和叙述文本，就像典型的 R Markdown 文件一样。 让我们编辑这个 index.Rmd post。这篇 post 是一个 Hugo page bundle。每个 post 都有自己的 bundle 或文件夹。post bundle 内是您的静态帖子特定文件（例如图像和 .csv 数据文件）应该存放的位置。 content/ ├── post │ ├── 2020-12-01-r-rmarkdown │ │ ├── index.html &lt;- blogdown knitted this for you │ │ └── index.Rmd │ ├── 2015-01-01-lorem-ipsum │ └── 2016-12-30-hello-markdown blogdown 的默认行为是在您为网站提供服务时自动 knit 以前未 knitted 过的 posts，因此该文件已经 knitted 过 — 这就是为什么您可以在本地预览中看到它。 继续向该文件添加 R 代码块，例如： ```{r} summary(Orange) ``` 如果您通过此编辑保存文件，blogdown 将在保存时 re-knit 文件，一旦 LiveReload 启动，您的网站预览应在几秒钟后更新。 再试一次！添加另一个 R 代码块，例如： ```{r echo=FALSE} library(ggplot2) ggplot(Orange, aes(x = age, y = circumference, color = Tree)) + geom_point() + geom_line() + guides(color = &quot;none&quot;) + theme_bw() ``` 您应该会看到一个 blog post 如 Figure 1.6 所示。 FIGURE 1.6: Adding new R code to an .Rmd post. 1.2.5 When in doubt, run blogdown::check_site() 网站无法按预期工作的可能原因有很多。例如，您可能错误配置了网站配置文件（例如 config.yaml）中的某些选项，或者将一个 post 标记为 draft 但忘记在发布网站之前取消标记。这些错误很容易犯，而且通常很难诊断。 幸运的是，函数 blogdown::check_site() 可以在您的网站项目中运行一系列检查，以帮助您识别常见问题。它还提供了有关如何解决这些问题的提示。它适用于您的交互式工作会话。您将看到哪些文件被检查，哪些检查成功，当检查需要您注意时，blogdown 将提供 [TODO] 项目，如下所示： ----------------------------------------------------------- ○ A successful check looks like this. ● [TODO] A check that needs your attention looks like this. | Let&#39;s check out your blogdown site! ----------------------------------------------------------- ― Checking config.yaml | Checking &quot;baseURL&quot; setting for Hugo... ○ Found baseURL = &quot;https://yihui.org/&quot;; nothing to do here! .... ― Check complete: config.yaml ― Checking .gitignore | Checking for items to remove... ○ Nothing to see here - found no items to remove. | Checking for items to change... ● [TODO] Change items in .gitignore: public -&gt; /public, blogdown -&gt; /blogdown | Checking for items you can safely ignore... ● [TODO] You can safely add to .gitignore: .DS_Store, Thumbs.db .... ― Check complete: .gitignore ― Checking Hugo | Checking Hugo version... ○ Found 8 versions of Hugo. You are using Hugo 0.82.1. | Checking .Rprofile for Hugo version used by blogdown... | Hugo version not set in .Rprofile. ● [TODO] Set options(blogdown.hugo.version = &quot;0.82.1&quot;) in .Rprofile and restart R. ― Check complete: Hugo ― Checking netlify.toml... ○ Found HUGO_VERSION = 0.25.1 in [build] context of netlify.toml. .... ― Check complete: netlify.toml ― Checking content files | Checking for validity of YAML metadata in posts... ○ All YAML metadata appears to be syntactically valid. | Checking for previewed content that will not be published... ○ Found 0 files with future publish dates. ● [TODO] Found 2 files marked as drafts. To un-draft, run: blogdown::edit_draft(c( &quot;content/foo.md&quot;, &quot;content/bar.md&quot; )) and change a file&#39;s YAML from &#39;draft: true&#39; to &#39;draft: false&#39;. .... ― Check complete: Content 1.2.6 Configure site 我们刚刚向您展示了如何开始将 .Rmd 内容添加到您的网站。但是，当您第一次设置网站时，您将需要编辑一些其他文件来个性化您的网站。config.yaml 文件存储 Hugo 和 Hugo 主题的网站配置。您通常只会在初始网站设置期间编辑此文件。 例如，您可能会在 config.yaml 中看到类似以下的配置： baseurl: / title: A Hugo website theme: hugo-lithium ignoreFiles: - \\.Rmd$ - \\.Rmarkdown$ - _cache$ - \\.knit\\.md$ - \\.utf8\\.md$ permalinks: post: /:year/:month/:day/:slug/ menu: main: - name: About url: /about/ - name: GitHub url: https://github.com/rstudio/blogdown - name: Twitter url: https://twitter.com/rstudio 您可以更改网站标题，例如：title: \"My own cool website\"，并更新 GitHub 和 Twitter URLs。 1.2.7 Summary 您现在已经了解了 Hugo-based 网站的三个最基本的概念： 如何使用 blogdown::serve_site() 或 RStudio 插件 “Serve Site” 在本地预览 Hugo 站点。 如何编辑 Hugo 配置文件 config.yaml 来指定站点和主题的全局设置。 如何编辑 content/ 目录中的内容，您可以在其中为 posts 和 pages 编写 R Markdown 或 Markdown 源文件。在默认站点的 content/ 下，您可以看到 about.md 和包含一些帖子的 post/ 目录。内容目录的组织由您决定。您可以在那里拥有任意文件和目录，具体取决于您想要的网站结构。 1.2.8 What is next? 如果您对这个默认主题感到满意，那么您基本上已经准备好开始编写和发布您的新网站了！发布像这样的静态网站有很多选择，如果您不熟悉部署网站，我们将在 Chapter 3 中详细讨论它们。 我们还将在 Section 1.7 中展示如何使用其他主题。但是，请记住，更复杂和更奇特的主题可能需要您更多地了解所有底层技术，例如 Hugo templating language、HTML、CSS 和 JavaScript。 此处的说明依赖于最新的 RStudio IDE 版本 v1.4.1106。您可以从 https://posit.co/download/rstudio-desktop/ 下载所有 RStudio 官方版本。↩︎ 在您设置要部署的网站之前，LiveReload 仅更新网站的 local 版本。此版本仅您可见。为了使您的网站可搜索、可发现并在互联网上运行，您需要将网站文件上传到网站构建器。有关详细信息，请参阅 Chapter 3。↩︎ 您也可以将 RStudio Viewer 视为 Web 浏览器。↩︎ "],["a-quick-deploy.html", "1.3 A quick deploy", " 1.3 A quick deploy 发布 blogdown 网站涉及将包含所有渲染的网站文件（通常是一堆 *.html 文件和网站资源，如 fonts、CSS、JavaScript 和 images）的输出目录复制到 Web 服务器或 Web 托管服务。 在本部分中，我们将引导您完成快速部署，以使用 https://www.netlify.com 中的拖放工具发布您的网站。Netlify 是一个为静态网站提供云托管和无服务器后端服务的平台。对我们来说幸运的是，这正是我们所需要的—因为 blogdown 帮助我们使用 Hugo 创建静态网站。 如果您按照 Section 1.2 进行操作，您现在应该拥有一个使用 Hugo lithium 主题的静态网站，其中包含一篇 post 的 knitted .Rmd 内容，并使用 blogdown 在本地提供服务。 如果您不熟悉 GIT 或 GitHub 或部署网站，我们接下来描述的拖放方法是一个很好的工作流程。发布静态网站有很多选项，我们将在 Chapter 3 中详细讨论它们以及涉及版本控制和持续部署的高级工作流程。 1.3.1 Build site Hugo 网站的发布目录默认为 public/。您构建的网站将生成到此目录，您可以将其上传到任何可以提供静态网站服务的网络服务器，您的网站将启动并运行。 使用 blogdown::serve_site() 在本地为您的 Hugo 站点提供服务不会生成 public/ 目录。要遵循这种拖放方法，您需要首先在本地构建站点。 重新启动 R 会话，然后运行： blogdown::build_site() 或者，如果您使用 RStudio，您可以使用： Build 窗格中的 “Build Website” 按钮，或者 按 Ctrl + Shift + B (Cmd + Shift + B on macOS) 构建网站。 您应该在项目的根目录下看到一个新的 public/ 目录。切勿编辑此目录中的文件，因为每当您重新构建站点时，您的更改都将被覆盖。 请注意，此功能默认情况下不会 re-knit R Markdown 文件，因为渲染之前 knitted 过的 .Rmd 文件可能会很昂贵并且通常不受欢迎。鉴于 R 包升级有破坏旧代码的趋势，连续 re-knitting 旧内容几乎不可能不出错，尤其是在较长的时间内。 我们建议在构建网站之前始终先使用 blogdown::serve_site() 来预览您的网站。默认情况下，该函数将 knit 尚未 knitted 的 R Markdown 内容。如前所述，我们还建议运行 blogdown::check_content()。除此之外，我们还会检查您是否有需要 re-knit 的内容： | Checking your R Markdown content... ○ All R Markdown files have been knitted. ○ All R Markdown output files are up to date with their source files. 1.3.2 Use Netlify Drop 接下来，在线访问 Netlify Drop：https://app.netlify.com/drop。 您可以将 public/ 文件夹从文件查看器拖放到 Netlify 网页上的指定区域，其中显示“将站点输出文件夹拖放到此处”。 等待几秒钟，让 Netlify 部署文件，它会为您分配一个形式为 random-word-12345.netlify.app 的随机子域。您的网站上线后，如果您愿意，您将能够共享新 blogdown 网站的链接。 您会注意到一条免责声明，表明该网站将在 24 小时后删除。您需要创建一个帐户来保存此链接并使您的网站保持在线。 1.3.3 Sign up for Netlify Netlify 有一个免费计划，其中包含许多有用的功能，因此我们建议您注册一个帐户。注册： 在线访问 https://www.netlify.com. 单击 “Sign Up” 按钮。 如果您有 GitHub 帐户（https://github.com），我们建议使用您现有的 GitHub 帐户进行注册（无需创建其他帐户），因此选择“GitHub”（您可能需要登录），然后单击 “Authorize Netlify”。 在您的帐户中，如果您使用 Netlify Drop，您可以（并且应该）将您的随机子域更改为更有意义的子域。您可以在此处阅读有关更改站点默认 Netlify 子域的文档：https://docs.netlify.com/domains-https/custom-domains/#assign-a-domain-to-a-site 此外，您还可以通过您的帐户在本地进行更改来更新现有网站，必要时 reknit，然后使用 blogdown::build_site() 重建您的网站。在 Netlify 的 “Deploys” 选项卡中，向下滚动到看到 “Need to update your site? Drag and drop your site output folder here.” 将更新后的 public/ 文件夹拖放到此处以更新已部署的网站。 1.3.4 What is next? 您在网站上工作的次数越多，上述工作流程可能会变得很麻烦。如果您熟悉 GIT 和 GitHub，发布网站会容易得多。 我们建议您从 GitHub 存储库在 Netlify 上创建一个新站点，其中包含您网站的源文件，这样您就可以享受持续部署的好处，而不是每次都手动上传 public/ 文件夹。 借助这种高级工作流程，您无需在本地运行 blogdown::hugo_build()，因为可以通过 Hugo 在 Netlify 上构建网站。相反，您可以在将更改推送到 GitHub 之前在本地依赖 blogdown::serve_site() 预览您的网站。请参阅 Chapter 3 了解更多信息。 "],["rstudio-ide.html", "1.4 RStudio IDE", " 1.4 RStudio IDE 有一些基本的 RStudio 插件可以让您轻松编辑和预览网站，您可以在 RStudio 工具栏上的 “Addins” 菜单中找到它们： “Serve Site”：此插件调用 blogdown::serve_site() 使用 LiveReload 技术在本地持续为您的网站提供服务，以便您可以实时预览网站。您可以在预览时继续编辑网站的材料。 “New Post”：此插件提供了一个对话框，供您输入博客文章的 metadata，包括标题、作者、日期等。示例见 Figure 1.7。这个插件实际上在底层调用了函数 blogdown::new_post() ，但会自动执行一些操作： 当您输入 post 标题时，它会为您生成一个文件名，如果您不喜欢自动生成的文件名，您可以对其进行编辑。事实上，你也可以使用这个插件在 content/ 下的任何目录下创建普通页面。例如，如果要添加简历页面，可以将文件名从默认的 post/YYYY-mm-dd-resume.md 更改为 resume.md。 您可以从 Shiny 提供的日历小部件中选择日期。4 它将扫描现有 posts 的类别和标签，因此当您想要输入类别或标签时，您可以从下拉菜单中选择它们，或者创建新的类别或标签。 新 post 创建后会自动打开，您可以立即开始撰写内容。 “Update Metadata”: 此插件允许您更新当前打开的 post 的 YAML metadata。示例见 Figure 1.8。该插件的主要优点是您可以从下拉菜单中选择类别和标签，而不必记住它们。 “Insert Image”: 此插件允许您将计算机中的任何图像插入到当前打开的 post 中。5 Figure 1.9 显示了该插件的外观。此插件将图像复制到 post 文件的最终位置，并添加 Markdown/HTML 代码来嵌入图像。您可以指定图像的宽度和高度以及替代文本。图片上传后，插件将显示最终的图片文件路径。如有必要，您可以编辑路径。如果图像已经存在，插件会询问您是否要覆盖它，如 Figure 1.10 所示：如有疑问，请更改 “Target file path” 文本输入中的名称，以避免与您之前插入的图像发生冲突。 FIGURE 1.7: Create a new post using the RStudio addin. FIGURE 1.8: Update the metadata of an existing post using the RStudio addin. FIGURE 1.9: Insert an image to an existing post using the RStudio addin. FIGURE 1.10: Overwrite the image you are inserting in your blog post. 使用这些插件，在设置网站后，您应该很少需要手动运行任何 R 命令，因为由于 LiveReload 功能，每当您创建新帖子或修改现有帖子时，您的所有帖子都会自动编译。 如果您的网站是第一次使用函数 blogdown::new_site() 而不是 RStudio 菜单（见 Figure 1.1 和 1.2）创建的，您可以退出 RStudio 并再次打开项目。如果您进入菜单 Tools -&gt; Project Options，您的项目类型应该是 “Website”，如 Figure 1.11 所示。 然后您将在 RStudio 中看到一个名为 “Build” 的窗格，并且有一个 “Build Website” 按钮。当您单击此按钮时，RStudio 将调用 blogdown::build_site() 来构建网站。这会自动在 public/ 目录下生成文件。6 我们强烈建议您在 RStudio 项目选项中取消选中 “Preview site after building” 选项（Figure 1.11）。7 您还可以取消选中 “Re-knit current preview when supporting files change” 选项，因为此选项在你调用 serve_site() 之后并不是很有用。 FIGURE 1.11: RStudio project options. Shiny 是一个 R 包，用于使用 R 构建交互式 Web apps。使用此插件，日历小部件允许您按月查看交互式日历以选择日期。这是 Shiny 的简单使用，但您可以在这里阅读有关 Shiny 应用程序的更多信息：https://shiny.rstudio.com。↩︎ 查看 https://lcolladotor.github.io/2018/03/07/blogdown-insert-image-addin 以获取更深入的解释以及如何在不使用此插件的情况下插入图像。↩︎ 或者您的发布目录所在的任何位置。默认是 public/，但可以通过在 config.yaml 文件中指定字段 publishDir: \"myNewDirectory\" 来更改。↩︎ 如果您想知道为什么：除非您在 config.toml 中将选项 relativeurls 设置为 true，否则需要 Web 服务器在本地预览网站，否则即使您可以在 RStudio Viewer 中看到网站的主页，大多数链接都像这些指向 CSS 和 JavaScript 文件的链接不太可能起作用。当 RStudio Viewer 向您显示预览时，它实际上并没有启动 Web 服务器。↩︎ "],["global-options.html", "1.5 Global options", " 1.5 Global options blogdown 包使用 .Rprofile 文件中指定的全局选项来帮助用户自定义 blogdown 的工作方式。当您创建新站点时，blogdown 会在您的网站项目的根目录中添加一个项目级 .Rprofile` 文件。 选项应使用语法 options(name = value) 进行设置，新 blogdown 站点的 .Rprofile 文件中包含的选项如 Table 1.1 所示。 TABLE 1.1: Global options for configured for new blogdown sites. Option name Default Meaning blogdown.hugo.version A valid Hugo version A Hugo version number blogdown.knit.on_save TRUE Knit Rmd files automatically on save? blogdown.method markdown The output format of .Rmd posts blogdown.serve_site.startup FALSE Serve the site on RStudio startup? 其中三个选项值得进一步解释： blogdown.hugo.version: 您可以在 https://github.com/gohugoio/hugo/releases/ 找到可用的 Hugo 版本，并通过 blogdown::find_hugo('all') 查找所有本地安装的 Hugo 版本。指定此选项时的一个常见错误是省略末尾的版本号 0。例如，仅 Hugo v0.55.0 存在，但不存在 v0.55，因此 options(blogdown.hugo.version = '0.55') 将不起作用，您必须将其精确设置为 0.55.0。 blogdown.knit.on_save: 默认情况下，Rmd 文件保存时会自动 knitted。如果您更喜欢单击 RStudio 中的 Knit 按钮来手动 knit 文件，可以将此选项设置为 FALSE。如果未设置此选项，当您单击 Knit 按钮时，blogdown 会将当前 R 会话设置为 TRUE（带有提醒消息）。 blogdown.method: 默认情况下，Rmd 帖子通过 rmarkdown 编译为 .md (Markdown)，该文件将由 Hugo 的 Markdown 渲染器（例如 Goldmark）渲染为 HTML。您可以将此选项设置为 \"html\" 以将 .md 预渲染为 .html 并绕过 Hugo 的 Markdown 渲染器。基本上，此选项决定您是否要使用 Pandoc 还是 Hugo 的 Markdown 渲染器将 Markdown 渲染为 HTML。有关详细信息，请参阅 Section @ref{method}。 我们建议您在 R 启动配置文件中设置这些选项。如果您以前从未使用过启动配置文件，您可以查看帮助页面 ?Rprofile。在这里，我们提供简短但不完整的介绍，以便您快速熟悉。 启动配置文件基本上是一个 R 脚本，在 R 会话启动时执行。这是设置全局选项的完美位置，因此您无需在每次启动新的 R 会话时再次键入这些选项。 在使用 R 的启动配置文件之前，您需要了解以下几点： 您可以使用一个全局配置文件 ~/.Rprofile,8 或 RStudio 项目根目录下的每个项目文件 .Rprofile。前者将应用于您启动的所有 R 会话，除非您提供了后者来覆盖它。 名称 “startup profile file” 意味着 R 仅在您首次启动 R 会话时执行此文件。这意味着当您修改并保存 .Rprofile 时，必须重新启动 R 才能使更改生效。 R 将默默忽略 .Rprofile 的最后一行 如果它没有尾随换行符, 因此请确保在 .Rprofile 末尾添加至少一个换行符。 如果您想将配置文件添加到现有的 blogdown 项目，或者您在不使用 blogdown::new_site() 的情况下创建了新网站，则可以在 R 控制台中使用以下命令创建样板版本： blogdown::config_Rprofile() 这是创建或修改每个项目配置文件的最简单方法。在新的 blogdown 网站项目的文件顶部，您将看到以下内容： # REMEMBER to restart R after you modify and save this file! # First, execute the global .Rprofile if it exists. You may # configure blogdown options there, too, so they apply to any # blogdown projects. Feel free to ignore this part if it sounds # too complicated to you. if (file.exists(&quot;~/.Rprofile&quot;)) { base::sys.source(&quot;~/.Rprofile&quot;, envir = environment()) } 首先，请注意顶部消息！下一部分代码是执行项目配置文件以及全局配置文件所必需的（如果存在）。R 只读取一个启动配置文件。例如，如果当前目录下有一个 .Rprofile 和一个全局 ~/.Rprofile，则当 R 从当前目录启动时，只会执行前一个。为您提供此代码，以便您可以执行全局和每个项目的配置文件。请注意，此代码只能存在于项目配置文件中，并且您不能将其添加到全局 ~/.Rprofile 中，否则它将触发无限递归。 在其下方，您将设置您的选项。这些可以堆叠在单独的行上，或者您可以使用逗号将多个选项一起列出： # stacked options options(blogdown.serve_site.startup = FALSE) options(blogdown.knit.on_save = TRUE) # comma-separated options options(blogdown.serve_site.startup = FALSE, blogdown.knit.on_save = TRUE) 如何格式化您的配置文件取决于您—无论哪种方式都有效。样板配置文件中提供的 blogdown 选项只是可用选项的子集。根据您的个人喜好和您选择的主题，您可能希望在网站上工作时设置更多全局选项。例如： TABLE 1.2: Additional global options that affect the behavior of blogdown. Option name Default Meaning blogdown.author The default author of new posts blogdown.ext .md Default extension of new posts: .md / .Rmd / .Rmarkdown blogdown.subdir post Default subdirectory under content/ for new posts blogdown.yaml.empty TRUE Preserve empty fields in YAML? 假设您总是喜欢编写 .Rmd 帖子（而不是默认的 .md），并且希望新帖子的作者默认为 “John Doe”。您可以在配置文件中设置这些选项： options(blogdown.ext = &#39;.Rmd&#39;, blogdown.author = &#39;John Doe&#39;, blogdown.subdir = &#39;blog&#39;) 设置这些选项的一个很好的结果是，当您使用 RStudio 插件 “New Post” 时，“Author”、“Subdirectory” 和 “Format” 字段将自动填充，因此您无需每次都操作它们，除非你想改变默认值。 使用启动配置文件时的一个不便之处在于团队创作的博客，其中多个作者在同一个网站项目上进行协作。您无法在单个 .Rprofile 中使用 blogdown.author 选项设置特定于作者的选项，因为此选项对于不同的作者应该不同。一种解决方法是在项目 .Rprofile 中设置通用网站选项，然后允许每个作者在每个作者计算机上的全局 ~/.Rprofile 中设置自己的特定于作者的选项。如果您使用样板 blogdown::config_Rprofile()，顶部的第一块代码将确保全局 ~/.Rprofile 也被执行（如果存在）。 波形符 ~ 表示您系统中的主目录。↩︎ "],["output-format.html", "1.6 R Markdown vs. Markdown", " 1.6 R Markdown vs. Markdown 如果您不熟悉 R Markdown，请参阅 Appendix A 的快速教程。当您创建新帖子时，您必须决定是否要使用 R Markdown 还是普通 Markdown，如 Figure 1.7 所示。 Table 1.3 总结了三种文件扩展名之间的主要区别。请注意，.Rmarkdown 始终呈现为 Markdown (.markdown)，但 .Rmd 可能呈现为 HTML 或 Markdown，具体取决于全局选项 blogdown.method = \"html\" 或 \"markdown\"。 TABLE 1.3: Differences among the three document formats. Feature .Rmd .Rmarkdown .md/.markdown Run R code yes yes no Bibliography yes yes no Cross references yes yes no LaTeX math yes maybe maybe HTML widgets yes yes no 基本上，您无法在普通 Markdown 文档（.md 或 .markdown）中执行任何 R 代码，而在 R Markdown 文档（.Rmd 或 .Rmarkdown）中，您可以嵌入 R 代码块（```{r}）。但是，您仍然可以使用受防护代码块 ```r 的语法将 R 代码嵌入到纯 Markdown 中（请注意，没有大括号 {}）。此类代码块将不会被执行，并且可能适合纯粹的演示目的。下面是 R Markdown 中 R 代码块的示例： ```{r cool-plot, fig.cap=&#39;A cool plot.&#39;} plot(cars, pch = 20) # not really cool ``` 下面是纯 Markdown 格式的 R 代码块示例： ```r 1 + 1 # not executed ``` 普通的 Markdown 帖子通过 Goldmark (用 Go 语言编写并被 Hugo 采用的 Markdown 渲染器) 直接渲染为 HTML。R Markdown 帖子首先通过 R 包 rmarkdown 和 bookdown 编译为 Markdown，这意味着您可以在 blogdown 中使用 bookdown’s Markdown extensions 扩展的大部分功能。然后，Markdown 帖子可以通过 Goldmark 或 Pandoc 呈现为 HTML。对于后一种情况，您还可以使用 Pandoc’s Markdown 中更丰富的功能（更多信息请参见 Section 1.6.2）。 1.6.1 Basic features of R Markdown 如果您将 R Markdown (Allaire et al. 2023) 与 blogdown 结合使用，我们建议您至少阅读一次 Pandoc 和 bookdown 的文档，以了解所有可能的功能。我们不会在本书中重复详细内容，而是在下面简要列出功能，这些功能也在示例网站 https://blogdown-demo.rbind.io 上进行了演示。 Inline formatting: _italic_ / **bold** text and `inline code`. Inline elements: subscripts (e.g., H~2~0) and superscripts (e.g., R^2^); links ([text](url)) and images ![title](url). Footnotes: text[^1]; [^1]: your footnote content. Note that the inline footnote text^[footnote] is no longer supported by Hugo. As Hugo switched the default Markdown renderer to Goldmark since v0.60.0, which does not support inline footnotes. Block-level elements: paragraphs; numbered and unnumbered section headers; ordered and unordered lists; block quotations; fenced code blocks; tables; horizontal rules. Math expressions and equations. Theorems and proofs. R code blocks that can be used to produce text output (including tables) and graphics. Note that equations, theorems, tables, and figures can be numbered and cross-referenced. Citations and bibliography. HTML widgets, and Shiny apps embedded via &lt;iframe&gt;. 如果你不需要 Table 1.3 中的额外功能，你可以只写一个普通的 Markdown 帖子 (.md)，否则你需要使用 R Markdown。正如我们之前提到的，R Markdown 有两种可能的格式：一种文件扩展名为 .Rmd，另一种文件扩展名为 .Rmarkdown。后者总是渲染为 Markdown，由 Hugo 的 Markdown 渲染器（Goldmark）处理。前者可以呈现为 HTML 或 Markdown，我们将在下一节中解释。 1.6.2 Render R Markdown to Markdown or HTML? 如果您对帖子使用文件扩展名 .Rmd，则需要决定是将其呈现为 .html 还是 .md。本质上，这意味着您是否要使用 Pandoc 还是 Goldmark 来渲染帖子。要通过 Pandoc 渲染为 .html，您需要设置全局选项 options(blogdown.method = \"html\")。要渲染为 .md，您可以设置 options(blogdown.method = \"markdown\")。 总的来说，Pandoc 的 Markdown 功能比 Goldmark 更丰富。例如，Goldmark 不支持 LaTeX 数学，而 Pandoc 支持。我们已在 blogdown 中的默认主题 (hugo-lithium) 中添加了 MathJax 支持，以在 HTML 页面上呈现 LaTeX 数学，但对于纯 Markdown 帖子有一个警告：您必须在一对反引号 `$math$` 中包含内联数学表达式，例如 `$S_n = \\sum_{i=1}^n X_i$`。同样，显示样式的数学表达式必须写成 `$$math$$`。对于要呈现为 .html 的 .Rmd 帖子，您可以使用 $math$ 作为内联数学表达式，使用 $$math$$ 作为显示样式表达式。9 将 .Rmd 渲染为 .html 的主要缺点是： 您可能会牺牲一些渲染网站的速度，但是由于 blogdown 中的缓存机制，这可能不会被注意到（更多内容请参见 Section D.3）。 Hugo 在处理纯 Markdown 文件时非常快，通常渲染几百个帖子需要不到一秒的时间。 您网站的源目录中将会有一些中间 HTML 文件，因为 blogdown 必须调用 rmarkdown 将 *.Rmd 文件预渲染为 *.html。如果您有 R 代码块中的绘图输出或启用了 knitr 的缓存，您还将拥有图形 (*_files/) 和缓存 (*_cache/) 的中间文件夹。除非你非常关心网站源代码存储库的“清洁度”（特别是当你使用像 GIT 这样的版本控制工具时），否则这些中间文件应该无关紧要。 将 .Rmd 渲染为 .md（或 .Rmarkdown 渲染为 .markdown）有两个主要限制： 您不能使用仅 Pandoc 支持的 Markdown 功能，例如受隔离的 Divs。 仅当您应用 Section B.3 中提到的 JavaScript 解决方案时，数学表达式才有效。 将帖子渲染为 Markdown 而不是 HTML 的主要优点是输出文件更干净，因为它们是 Markdown 文件（相比之下，HTML 文件通常包含大量 HTML 标签，这些标签对于人类来说很难阅读）。您可以更轻松地阅读帖子的输出，而无需查看呈现的实际网页。这在查看 GitHub pull 请求时特别有用。请注意，还支持编号表、图形、方程和定理。您不能直接在表格或图形标题中使用 Markdown 语法，但可以使用文本引用作为解决方法（请参阅 bookdown 的文档）。 1.6.3 Customize the R Markdown output format 对于任何 R Markdown 文档（不特定于 blogdown），您必须指定输出格式。rmarkdown 包（例如 html_document 和 pdf_document）和其他扩展包（例如 tufte::tufte_html 和 bookdown::gitbook）中有许多可能的输出格式。当然，网站的输出格式应该是 HTML。我们在 blogdown 中提供了一个输出格式函数 blogdown::html_page，所有的 R Markdown 文件都是使用这种格式渲染的。它基于输出格式 bookdown::html_document2，这意味着除了 Pandoc 的功能之外，它还继承了 bookdown 的很多功能。例如，您可以对数学方程、图形、表格和定理等进行编号和交叉引用。有关语法的更多详细信息，请参阅 bookdown book (Xie 2016) 的 Chapter 2。 请注意，输出格式 bookdown::html_document2 又继承自 rmarkdown::html_document，因此您需要查看帮助页面 ?rmarkdown::html_document 以了解 blogdown::html_page 格式的所有可能选项。如果要更改此输出格式的选项的默认值，可以将输出字段添加到 YAML metadata 中。例如，我们可以向页面添加目录，将图形宽度设置为 6 英寸，并通过在 YAML 中设置以下选项来使用 svg 设备进行绘图： --- title: &quot;My Awesome Post&quot; author: &quot;John Doe&quot; date: &quot;2017-02-14&quot; output: blogdown::html_page: toc: true fig_width: 6 dev: &quot;svg&quot; --- 要全局设置 blogdown::html_page() 的选项（即，将某些选项应用于所有 Rmd 文件），您可以在网站的根目录下创建一个 _output.yml 文件。此 YAML 文件应直接包含输出格式（不要将输出格式放在 output 选项下），例如， blogdown::html_page: toc: true fig_width: 6 dev: &quot;svg&quot; 目前，blogdown 并不支持 rmarkdown::html_document 的所有功能，例如 df_print、code_folding、code_download 等。 如果您的代码块有图形输出，我们建议您避免在块标签中使用空格等特殊字符。理想情况下，您应该只使用字母数字字符和破折号，例如 ```{r, my-label} 而不是 ```{r, my label}。 不建议更改 R Markdown 中的 knitr chunk 选项 fig.path 或 cache.path。这些选项的默认值最适合 blogdown。如果您愿意，请阅读 Section D.5 以了解技术原因。 如果您正在编写 R Markdown 帖子，但不希望 blogdown 对其进行编译，您可以暂时将其文件扩展名从 .Rmd 更改为另一个未知扩展名，例如 .Rmkd。 References "],["other-themes.html", "1.7 Other themes", " 1.7 Other themes 在 Hugo 中，themes 控制站点的整个外观和功能。Hugo 主题由以下元素组成： 配置文件。这可能是网站项目根目录中的单个 config.yaml 或 config.toml 文件。某些主题还使用配置目录，位于 config/_default/ 中。请参阅 Chapter 2.2 了解有关这些文件的更多信息。 布局文件，例如位于 themes/hugo-lithium/layouts/ 中。Hugo 是一个模板系统，因此布局文件是 *.html 文件，具有特定的文件和命名结构。请参阅 Section 2.5 了解有关这些文件的更多信息。 样式资源文件，例如字体和 CSS。 HTML 依赖项，如 JavaScript 文件。 所有这些文件都包含在 themes/ 文件夹中，并与您的网站 content/ 分开保存。然而，所有 Hugo 主题都依赖于特定的 content/ 和 YAML frontmatter，所以不要误以为主题和内容并不相互依赖—它们是相互依赖的！在本节中，我们提供了一些关于选择主题的固执己见的建议，以及使用 blogdown 处理 Hugo 主题的推荐工作流程。 1.7.1 Choosing themes 如果您非常关心网站的外观，那么一开始您可能会花费相当多的时间从 https://themes.gohugo.io 列出的集合中寻找您喜欢的 Hugo 主题。请注意，并非所有主题都经过 blogdown 测试。如果您发现某个主题与 blogdown 不能很好地配合，您可以向 https://github.com/rstudio/blogdown/issues 报告，我们会尽力调查原因，但学习和了解新主题是如何工作的可能会很耗时，因此我们建议您在提问之前先自行了解一下 Hugo，我们也鼓励用户互相帮助。 现在有大约 400 个 Hugo 主题可供选择。为了节省您的时间，我们在下面列出了一些符合我们口味的主题： Simple/minimal themes: XMin, Tanka, Cupper, simple-a, and ghostwriter. Sophisticated themes: Jane, Tranquilpeak, Creative portfolio, and Universal. Multimedia content themes: 如果您有兴趣向您的站点添加多媒体内容（例如播客的音频文件），castanet 主题提供了为此应用程序量身定制的出色框架。使用带有 castanet 主题的 blogdown 的网站的一个示例是 R-Podcast.。 如果您不懂 HTML、CSS 或 JavaScript，并且没有使用 Hugo 主题或模板的经验，那么您可能需要大约 10 分钟才能开始使用新网站，因为您必须接受所提供的一切（例如默认主题）；如果您确实拥有知识和经验（并且希望高度定制您的网站），那么您可能需要几天的时间才能开始。Hugo 确实很强大。对权力要谨慎。 另一件要记住的事情是，你在一个复杂的主题上付出的努力越多，将来切换到其他主题就越困难，因为你可能已经定制了很多不能直接移植到另一个主题的东西。所以请认真地问自己，“我是否非常喜欢这个奇特的主题，以至于在未来几年内我绝对不会改变它？” If you choose to dig a rather deep hole, someday you will have no choice but keep on digging, even with tears. — Liyun Chen10 1.7.2 New site, new theme 要在新站点中使用 hugo-lithium 以外的 Hugo 主题（我们在 Section 1.2 中展示），我们建议采用以下工作流程： 在 https://themes.gohugo.io 上仔细选择一个主题，11 并找到其 GitHub 存储库的链接，格式为 https://github.com/user/repo。例如，Hugo theme Anatole 的来源位于 https://github.com/lxndrblz/anatole。 在 RStudio 中创建一个新项目 (File -&gt; New Project -&gt; New Directory -&gt; Website using blogdown) （见 Figures 1.1 和 1.2）。 在 “Hugo theme” 字段中，输入步骤 1 中链接中的 user/repo。单击 “Create Project”。 或者，在 R 控制台中，您可以输入 blogdown::new_site(theme = 'user/repo')： # for example, create a new site with the anatole theme blogdown::new_site(theme = &#39;lxndrblz/anatole&#39;) 使用新站点一段时间，如果您不喜欢它，可以重复上述步骤，否则编辑配置文件（config.yaml 或 config.toml）中的选项。如果您不理解某些选项，请转到主题文档，这通常是 GitHub 存储库的 README 页面。并非所有选项都必须更改。 1.7.3 Existing site, new theme 一般来说，我们不建议您切换主题，因为每个 Hugo 主题都取决于您在特定于主题的配置文件（config.yaml 或 config.toml）以及 content/ 文件的 YAML 中提供的不同变量。通常为各个主题提供示例站点，因此我们建议使用 blogdown::new_site()，然后编辑提供的示例站点作为起点。但是，如果您确实想使用现有站点测试不同的 Hugo 主题，则可以从以下工作流程开始： 在 R 控制台中，通过 blogdown::install_theme() 安装主题。 blogdown::install_theme(theme = &#39;lxndrblz/anatole&#39;) 手动将配置文件（config.yaml 或 config.toml）从 themes/theme-name/exampleSite/ 目录移动到网站的根目录以匹配新安装的主题。 仔细检查新主题的 exampleSite 和 content/ 文件夹中的文件之间的差异。主题的示例站点内容是针对特定主题量身定制的，因此在不更改 content/ 的情况下更改主题/有点像穿别人的衣服—它们可能不合适。 1.7.4 Existing site, update theme 更新 Hugo 主题文件不适合胆小的人，除非必须，否则我们也不建议这样做。我们通常还建议您仅在集成 GIT 和 GitHub 进行版本控制时才执行此操作，并且首先尝试在分支中更新主题。 这很困难的主要原因是 Hugo 主题文件可能需要更改网站配置文件（config.yaml 或 config.toml）以及各个内容文件的 YAML，具体取决于主题更新的程度。所以更新主题可能会很麻烦。 为什么主题开发者要更新他们的主题？三个原因。一、Hugo 改变了。因此，Hugo 主题开发人员必须更改其主题以跟上已弃用的 Hugo 功能。第二，Hugo 主题开发人员在报告错误时修复他们的主题。第三，流行的 Hugo 主题通常会提出大量功能请求，并且一些主题开发人员对添加新功能很敏感。 如果您发现自己需要更新主题，可以执行以下操作： blogdown::install_theme(theme = &#39;lxndrblz/anatole&#39;, force = TRUE) 然后通过比较更新的主题的 exampleSite 来慢慢了解站点配置文件和 content/ frontmatter（YAML metadata）中的更改。如前所述，我们建议在合并之前在不同的分支（即 not main）中完成这项工作。 Translated from her Chinese Weibo.↩︎ 对于大多数主题，您可以通过从 http://themes.gohugo.io 导航到您选择的主题，然后单击 “Download” 来找到它。↩︎ "],["workflow.html", "1.8 A recommended workflow", " 1.8 A recommended workflow 有很多方法可以开始构建网站并部署它。由于要完全理解网站的工作原理，您需要学习大量的技术，因此我们想向初学者推荐一种工作流程，以便他们不需要消化本书的其余部分。这绝对不是最优化的工作流程，但需要您了解最少的技术细节。 要启动一个新网站： 在 https://themes.gohugo.io 上仔细选择一个主题，并找到其 GitHub 存储库的链接，其格式为 https://github.com/user/repo。 在 RStudio 中创建一个新项目，然后在 R 控制台中键入代码 blogdown::new_site(theme = 'user/repo')，其中 user/repo 来自步骤 1 中的链接。 使用新站点一段时间，如果您不喜欢它，可以重复上述步骤，否则编辑 config.toml 中的选项。如果您不理解某些选项，请转到主题的文档，这通常是 GitHub 存储库的 README 页面。并非所有选项都必须更改。 编辑网站： 单击 RStudio 插件 “Serve Site” 以在 RStudio Viewer 中预览站点。只需在每次打开 RStudio 项目或重新启动 R 会话时执行一次此操作。不要单击 RStudio 工具栏上的 Knit 按钮。 使用 “New Post” 插件创建新帖子或页面，然后开始编写内容。 如有必要，请使用 “Update Metadata” 插件修改 YAML metadata。 要发布网站，请参阅 Section 1.3。 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
